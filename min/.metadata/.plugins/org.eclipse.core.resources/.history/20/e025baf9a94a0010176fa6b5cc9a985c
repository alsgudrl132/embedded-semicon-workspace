/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "adc.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
uint8_t Flag, tFlag, bFlag, sFlag;
uint16_t JoyStick_XY[2];
uint8_t newKey = 0;
uint8_t oldKey = 0;

char DISP[30]={'\0'};
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void JoyStick_Read(uint16_t* JoyStick_XY)
{
    uint16_t AD_RES;

    HAL_ADC_ConfigChannel(&hadc, ADC_CHANNEL_0);

    HAL_ADC_Start(&hadc);
    // Poll ADC1 Peripheral & TimeOut = 1mSec
    HAL_ADC_PollForConversion(&hadc, 10);
    // Read The ADC Conversion Result Write It To JoyStick X
    AD_RES = HAL_ADC_GetValue(&hadc);
    JoyStick_XY[0] = AD_RES;

    // Start ADC Conversion
    HAL_ADC_ConfigChannel(&hadc, ADC_CHANNEL_1);
    HAL_ADC_Start(&hadc);
    // Poll ADC1 Peripheral & TimeOut = 1mSec
    HAL_ADC_PollForConversion(&hadc, 10);
    // Read The ADC Conversion Result Write It To JoyStick Y
    AD_RES = HAL_ADC_GetValue(&hadc);
    JoyStick_XY[1] = AD_RES;
}

void HAL_IncTick(void) // HAL_getTick()
{
    uwTick += uwTickFreq;
    if((uwTick % 10)==0) //10mS tick
    {
        //tFlag = SET;//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
        newKey = !HAL_GPIO_ReadPin(GPIOA, JSB_Pin);
        if((newKey != oldKey) && newKey) { // if KEY pressed
            sFlag = sFlag==1 ? 0 : 1;
            bFlag = SET;
        }
        oldKey = newKey;
    }

    if((uwTick % 100)==0) //100mS tick
    {
        //JoyStick_Read((uint32_t *)JoyStick_XY);
        Flag = SET;
    }
}

void LCD_disp()
{
    LCD_SetCursor(1,0);
    sprintf(DISP, "X:%04d Y:%04d\n\r", (uint16_t)JoyStick_XY[0],(uint16_t)JoyStick_XY[1]);
    LCD_Print(DISP);
}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_TIM11_Init();
  MX_ADC1_Init();
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc, (uint32_t *)JoyStick_XY, 2);

    LCD_Init();
    LCD_SetCursor(0,0);

    LCD_Print("Hello KiMSON");
    LCD_PrintSpecialChar(0);

    LCD_Puts(0,1,"Linkbay.co.kr");
    LCD_PrintSpecialChar(1);

    HAL_Delay(1000);
    LCD_Clear();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_UART_Transmit(&huart2, adcValue, sizeof(adcValue), 1000);
    HAL_Delay(1000);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if(bFlag == SET){
            bFlag = RESET;
            HAL_GPIO_WritePin(GPIOA, LED_Pin, sFlag);
        }
        if(Flag == SET){
            Flag = RESET;
            HAL_ADC_Start_DMA(&hadc, (uint32_t *)JoyStick_XY, 2);
            LCD_disp();
        }
        __NOP();
      }
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 100;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
